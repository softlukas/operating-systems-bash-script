#!/bin/bash

export POSIXLY_CORRECT=yes

date_regex='^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}$'

check_arguments() {
    local dateAfter=$after
    local dateBefore=$before
    local curr=$currency

    local currLength=${#curr}
    if [[ ! $currLength -eq 3 && ! currLength -eq 0 ]]; then
        exit 1
    fi

    # Ověření, zda je datum ve správném formátu pomocí regexu
    if [[ -n $dateAfter && ! $dateAfter =~ $date_regex ]]; then
        exit 1
    fi
    if [[ -n $dateBefore && ! $dateBefore =~ $date_regex ]]; then
        exit 1
    fi

}

check_file() {
    local logFile="$file"

    while IFS=';' read -r trader timestamp curr amount; do
        if [[  -z $trader || -z $timestamp || -z $curr || -z $amount ]]; then
            exit 1
        fi
        
        if [[ ! $timestamp =~ $date_regex ]]; then
            exit 1
        fi
    done < "$logFile"
}


print_help() {
    echo help
}

print_status() {
    local user=$user
    local files="${log_files[@]}"
    local dateBefore=$before
    local dateAfter=$after
    local currencyFilter=$currency

    declare -A currenciesBalance
    for file in "${log_files[@]}"; do
        
        if [[ $file == *.gz ]]; then
           
            outputCommand="gunzip -c"

        else
            
            outputCommand="cat"
        fi
            #output=$(cat "$file")
            
        #fi
            #deklarujeme asociativne pole (nieco na styl dictionary)
        
        #IFS je oddelovac, citame postupne riadky a jednolive hodnoty
        while IFS=';' read -r trader timestamp currency amount; do
            if [[ $trader == $user ]]; then
                if [[ -z $dateAfter || ($dateAfter < $timestamp && -n $dateAfter) ]]; then
                    if [[ -z $dateBefore || ($dateBefore > $timestamp && -n $dateBefore) ]]; then
                        if [[ -z $currencyFilter || ($currencyFilter == $currency && -n $currencyFilter) ]]; then

                            if [[ -z ${currenciesBalance[$currency]} ]]; then
                                    currenciesBalance[$currency]=0
                            fi
                            currenciesBalance[$currency]=$(awk "BEGIN { printf \"%0.4f\", ${currenciesBalance[$currency]} + $amount }")
                        fi
                    fi
                fi
            fi
        done < <($outputCommand "$file")
        
    done
    for currency in "${!currenciesBalance[@]}"; do
        echo "$currency : ${currenciesBalance[$currency]}"
    done | sort 

    

    
}

# Funkce pro zpracování příkazu list
process_list_command() {
    local user=$user
    local logFile=$file
    local dateBefore=$before
    local dateAfter=$after
    local currencyFilter=$currency 
    
    while IFS=';' read -r trader timestamp currency amount; do
        if [[ $trader == $user ]]; then
            if [[ -z $dateAfter || ($dateAfter < $timestamp && -n $dateAfter) ]]; then
                if [[ -z $dateBefore || ($dateBefore > $timestamp && -n $dateBefore) ]]; then
                    if [[ -z $currencyFilter || ($currencyFilter == $currency && -n $currencyFilter) ]]; then
                        echo "$trader;$timestamp;$currency;$amount"
                    fi
                fi
            fi
        fi
    done < "$logFile"
    
}

print_currency_list() {
    
    for file in "${log_files[@]}"; do
        if [[ "$file" == *.gz ]]; then
            zcat "$file" | grep "^$user;" | cut -d';' -f3 | sort | uniq
        else
            grep "^$user;" "$file" | cut -d';' -f3 | sort | uniq
        fi
    done | sort -u
}

calculate_profit() {
    local user=$user
    local logFile=$file
    local dateBefore=$before
    local dateAfter=$after
    local currencyFilter=$currency

    
    # Deklarácia asociatívneho poľa pre uchovávanie stavu účtu
    declare -A currenciesBalance
    #echo $currencyFilter
    # Presmerovanie vstupu zo súboru do slučky while
    
    while IFS=';' read -r trader timestamp currency amount; do
        if [[ $trader == $user ]]; then
            if [[ -z $dateAfter || ($dateAfter < $timestamp && -n $dateAfter) ]]; then
                if [[ -z $dateBefore || ($dateBefore > $timestamp && -n $dateBefore) ]]; then
                    if [[ -z $currencyFilter || ($currencyFilter == $currency && -n $currencyFilter) ]]; then
                        if [[ -z ${currenciesBalance[$currency]} ]]; then
                            currenciesBalance[$currency]=0
                        fi
                        currenciesBalance[$currency]=$(awk "BEGIN { print ${currenciesBalance[$currency]} + $amount }")
                    fi
                fi
            fi
        fi
    done < "$logFile"

    # Ziskové percento z prostredia alebo 20% ako východzia hodnota
    local profit_percentage=${XTF_PROFIT:-20}
    #echo $profit_percentage
    # Výpočet zisku pre každú menu
    for currency in "${!currenciesBalance[@]}"; do
       
        # Vypočet zisku pre danú menu
        
        local current_balance=${currenciesBalance[$currency]}

        if [[ $(awk "BEGIN { if ($current_balance >= 0) print 1; else print 0 }") -eq 1 ]]; then
            local profit=$(awk "BEGIN { printf \"%.4f\", $current_balance * $profit_percentage / 100 }")
            local new_balance=$(awk "BEGIN { printf \"%.4f\", $current_balance + $profit }")
        else
            local new_balance=$(awk "BEGIN { printf \"%.4f\", $current_balance }")
        fi

        # Výpis zisku pre danú menu
        echo "$currency : $new_balance"
    done | sort
    
}

# Pokud je příkaz list, provedeme funkci process_list_command




# Zpracování vstupních argumentů
while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            print_help
            ;;
        list|list-currency|status|profit)
            if [[ -z "$command" ]]; then
                command="$1"
            else
                exit 1
            fi
            shift
            ;;
        -a)
        if [[ -z "$after" ]]; then
            after="$2"
        else
            exit 1
        fi
            shift 2
            ;;
        -b)
        if [[ -z "$before" ]]; then
            before="$2"
        else
            exit 1
        fi
            shift 2
            ;;
        -c)
            
            currency="$2"
            shift 2
            ;;
        *)
            if [[ -z "$user" ]]; then
                user="$1"
            elif ! [[ "$1" =~ ".log" || "$1" =~ ".gz" ]]; then
                exit 1
            else
                log_files+=("$1")
            fi
            shift
            ;;
    esac
done

# Zbývající argumenty jsou UŽIVATEL a LOG (a další soubory LOG)

check_arguments $after $before $currency

for file in "${log_files[@]}"; do
    if [[ $file == *.gz ]]; then
        zcat "$file" | check_file "$file"
    else
        check_file "$file"
    fi
done

if [[ -z "$command" ]]; then
    command=list
fi


if [[ "$command" == "list" ]]; then
    for file in "${log_files[@]}"; do
        if [[ $file == *.gz ]]; then
            zcat "$file" | process_list_command "$user" "$after" "$before" "$currency"
        else
            
            process_list_command "$user" "$after" "$before" "$currency"
        fi
    done
fi

if [[ "$command" == "list-currency" ]]; then
    print_currency_list
    
    
fi

if [[ "$command" == "profit" ]]; then
    for file in "${log_files[@]}"; do
        if [[ $file == *.gz ]]; then
            zcat "$file" | calculate_profit "$user" - "$after" "$before" "$currency"
        else
            calculate_profit "$user" "$file" "$after" "$before" "$currency"
        fi
        
    done | sort -u
    
fi

if [[ "$command" == "status" ]]; then
    
     
    print_status "$user" "${log_files[@]}" "$after" "$before" "$currency"
        
  
    
fi



